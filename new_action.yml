name: Generate PDFs and Deploy to Cloudflare Pages

on:
  push:
    branches:
      - content-update
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repo content
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "0.110.0"
          extended: true

      - name: Build Website
        run: hugo --minify

      # Push changes to content-update branch to trigger Cloudflare Pages build
      - name: Push changes to content-update
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: content-update

      # Poll Cloudflare API for the preview URL
      # - name: Retrieve Cloudflare Pages Preview URL
      #   id: get-preview-url
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #     PROJECT_NAME: "auto-portfolio"  # Replace with your project name
      #   run: |
      #     for i in {1..10}; do
      #       response=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
      #         -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
      #         -H "Content-Type: application/json")
      #       preview_url=$(echo "$response" | jq -r '.result[] | select(.deployment_trigger.metadata.branch=="content-update") | .url' | head -n 1)
      #       if [ -n "$preview_url" ]; then
      #         echo "::set-output name=url::$preview_url"
      #         break
      #       fi
      #       echo "Waiting for preview deployment..."
      #       sleep 30
      #     done
      #     if [ -z "$preview_url" ]; then
      #       echo "Error: Preview URL not found."
      #       exit 1
      #     fi
      # Poll Cloudflare API for the preview URL and wait

      - name: Retrieve Cloudflare Pages Preview URL
        id: get-preview-url
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROJECT_NAME: "auto-portfolio"  # Replace with your project name
        run: |
          for i in {1..10}; do
            response=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json")
            preview_url=$(echo "$response" | jq -r '.result[] | select(.deployment_trigger.metadata.branch=="content-update") | .url' | head -n 1)
            if [ -n "$preview_url" ]; then
              echo "::set-output name=url::$preview_url"
              echo "Preview URL: $preview_url"
              break
            fi
            echo "Waiting for preview deployment..."
            sleep 30
          done
          if [ -z "$preview_url" ]; then
            echo "Error: Preview URL not found."
            exit 1
          fi
          echo "Sleeping for 120 seconds to ensure the deployment is fully ready..."
  
      - name: Wait for Deployment to be Ready
        run: sleep 120
  
      - name: Generate PDFs
        env:
          PDFCO_KEY: ${{ secrets.PDFCO_KEY }}
          RESUME_URL: ${{ steps.get-preview-url.outputs.url }}  # Use the retrieved preview URL
        run: |
          mkdir -p static_pdf
          python get_pdf.py
          cp static_pdf/*.pdf ./static/
          cp static_pdf/*.pdf ./public/

      - name: Commit files if PDFs are updated
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add static
          git diff-index --quiet HEAD || git commit -m "Updated PDFs"

      - name: Reset main to match content-update and delete content-update branch
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch latest changes and checkout content-update
          git fetch origin
          git checkout content-update
  
          # Reset main branch to match content-update
          git checkout -B main
          git push origin main --force  # Force push to update main with content-update
  
          # Delete content-update branch from the remote
          git push origin --delete content-update